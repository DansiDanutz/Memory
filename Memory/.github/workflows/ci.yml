name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  formatting:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      
      - name: Install black
        run: pip install black
      
      - name: Check formatting with black
        run: black --check --diff app/ tests/

  type-checking:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      
      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install mypy types-requests types-PyYAML
      
      - name: Run mypy
        run: mypy app/ --ignore-missing-imports --no-strict-optional

  linting:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      
      - name: Install flake8
        run: pip install flake8
      
      - name: Lint with flake8
        run: |
          # Stop build if there are Python syntax errors or undefined names
          flake8 app/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics
          # Exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 app/ tests/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

  security:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      
      - name: Install bandit
        run: pip install bandit
      
      - name: Run security scan with bandit
        run: bandit -r app/ -f json -o bandit-report.json || true
      
      - name: Upload bandit report
        uses: actions/upload-artifact@v3
        with:
          name: bandit-security-report
          path: bandit-report.json

  test:
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      
      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg
      
      - name: Install Python dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio pytest-mock
      
      - name: Create test directories
        run: |
          mkdir -p data/contacts data/audit data/tenants
          mkdir -p app/memory-system/users
          mkdir -p backups
          mkdir -p data/.keys
      
      - name: Generate test encryption key
        run: |
          python -c "from cryptography.fernet import Fernet; open('data/.keys/master.key', 'wb').write(Fernet.generate_key())"
      
      - name: Set environment variables
        env:
          REDIS_URL: redis://localhost:6379
          WEBHOOK_VERIFY_TOKEN: test-verify-token
          WHATSAPP_ACCESS_TOKEN: test-access-token
          WHATSAPP_PHONE_NUMBER_ID: test-phone-id
          AZURE_SPEECH_KEY: test-azure-key
          AZURE_SPEECH_REGION: eastus
          OPENAI_API_KEY: test-openai-key
          DEFAULT_TENANT_ID: test-tenant
          DEFAULT_DEPARTMENT_ID: test-dept
        run: |
          echo "Environment configured for testing"
      
      - name: Run tests with coverage
        env:
          REDIS_URL: redis://localhost:6379
          WEBHOOK_VERIFY_TOKEN: test-verify-token
          WHATSAPP_ACCESS_TOKEN: test-access-token
          WHATSAPP_PHONE_NUMBER_ID: test-phone-id
          AZURE_SPEECH_KEY: test-azure-key
          AZURE_SPEECH_REGION: eastus
          OPENAI_API_KEY: test-openai-key
        run: |
          pytest tests/ -v --cov=app --cov-report=xml --cov-report=html --cov-report=term
      
      - name: Upload coverage reports
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: htmlcov/
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  integration-test:
    runs-on: ubuntu-latest
    needs: [formatting, type-checking, linting, test]
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379

    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      
      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install httpx
      
      - name: Create required directories
        run: |
          mkdir -p data/contacts data/audit data/tenants
          mkdir -p app/memory-system/users
          mkdir -p data/.keys
          python -c "from cryptography.fernet import Fernet; open('data/.keys/master.key', 'wb').write(Fernet.generate_key())"
      
      - name: Start application
        env:
          REDIS_URL: redis://localhost:6379
          WEBHOOK_VERIFY_TOKEN: test-verify-token
          WHATSAPP_ACCESS_TOKEN: test-access-token
          WHATSAPP_PHONE_NUMBER_ID: test-phone-id
          AZURE_SPEECH_KEY: test-azure-key
          AZURE_SPEECH_REGION: eastus
          OPENAI_API_KEY: test-openai-key
        run: |
          python -m uvicorn app.main:app --host 0.0.0.0 --port 5000 &
          sleep 5
      
      - name: Test health endpoint
        run: |
          curl -f http://localhost:5000/health || exit 1
      
      - name: Test metrics endpoint
        run: |
          curl -f http://localhost:5000/metrics || exit 1
      
      - name: Test webhook verification
        run: |
          curl -f "http://localhost:5000/webhook/whatsapp?hub.mode=subscribe&hub.verify_token=test-verify-token&hub.challenge=test" || exit 1
      
      - name: Test webhook POST
        run: |
          curl -X POST http://localhost:5000/webhook/whatsapp \
            -H "Content-Type: application/json" \
            -d '{"entry":[{"changes":[{"value":{"messages":[{"from":"test","type":"text","text":{"body":"/help"}}]}}]}]}' \
            -f || exit 1

  build-docker:
    runs-on: ubuntu-latest
    needs: [test, integration-test]
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Build Docker image
        run: |
          docker build -t memoapp-whatsapp:ci-${{ github.sha }} .
      
      - name: Run Docker container
        run: |
          docker run -d --name memoapp-test \
            -p 5000:5000 \
            -e WEBHOOK_VERIFY_TOKEN=test \
            -e WHATSAPP_ACCESS_TOKEN=test \
            -e WHATSAPP_PHONE_NUMBER_ID=test \
            -e AZURE_SPEECH_KEY=test \
            -e AZURE_SPEECH_REGION=eastus \
            -e OPENAI_API_KEY=test \
            -e REDIS_URL=redis://host.docker.internal:6379 \
            memoapp-whatsapp:ci-${{ github.sha }}
          
          sleep 10
          docker logs memoapp-test
      
      - name: Test containerized app
        run: |
          curl -f http://localhost:5000/health || exit 1
      
      - name: Clean up
        run: |
          docker stop memoapp-test
          docker rm memoapp-test

  dependency-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      
      - name: Install safety
        run: pip install safety
      
      - name: Check for vulnerable dependencies
        run: safety check -r requirements.txt --json || true
      
      - name: Install pip-audit
        run: pip install pip-audit
      
      - name: Audit dependencies
        run: pip-audit -r requirements.txt --desc || true

  summary:
    runs-on: ubuntu-latest
    needs: [formatting, type-checking, linting, security, test, integration-test]
    if: always()
    steps:
      - name: CI Summary
        run: |
          echo "## CI Pipeline Summary"
          echo "- Formatting: ${{ needs.formatting.result }}"
          echo "- Type Checking: ${{ needs.type-checking.result }}"
          echo "- Linting: ${{ needs.linting.result }}"
          echo "- Security: ${{ needs.security.result }}"
          echo "- Unit Tests: ${{ needs.test.result }}"
          echo "- Integration Tests: ${{ needs.integration-test.result }}"
          
          if [ "${{ needs.formatting.result }}" != "success" ] || \
             [ "${{ needs.type-checking.result }}" != "success" ] || \
             [ "${{ needs.linting.result }}" != "success" ] || \
             [ "${{ needs.test.result }}" != "success" ] || \
             [ "${{ needs.integration-test.result }}" != "success" ]; then
            echo "::error::CI Pipeline failed"
            exit 1
          fi
          
          echo "âœ… All checks passed!"