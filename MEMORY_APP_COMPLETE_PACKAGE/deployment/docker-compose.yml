version: '3.8'

services:
  # Memo App Backend
  memo-backend:
    build:
      context: ../backend
      dockerfile: Dockerfile
    container_name: memo-backend
    restart: unless-stopped
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - PORT=3001
      - DATABASE_URL=postgresql://memo:${POSTGRES_PASSWORD}@postgres:5432/memo_app
      - REDIS_URL=redis://redis:6379
    env_file:
      - .env.production
    depends_on:
      - postgres
      - redis
    volumes:
      - ../logs:/app/logs
      - ../uploads:/app/uploads
    networks:
      - memo-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Memo App Frontend
  memo-frontend:
    build:
      context: ../frontend
      dockerfile: Dockerfile
    container_name: memo-frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://memo-backend:3001
      - REACT_APP_ENVIRONMENT=production
    env_file:
      - .env.production
    depends_on:
      - memo-backend
    networks:
      - memo-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: memo-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: memo_app
      POSTGRES_USER: memo
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ../database/init:/docker-entrypoint-initdb.d
    networks:
      - memo-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U memo -d memo_app"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: memo-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ../redis/redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - memo-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: memo-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ../nginx/nginx.conf:/etc/nginx/nginx.conf
      - ../nginx/ssl:/etc/nginx/ssl
      - ../logs/nginx:/var/log/nginx
    depends_on:
      - memo-frontend
      - memo-backend
    networks:
      - memo-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: memo-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ../monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - memo-network

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: memo-grafana
    restart: unless-stopped
    ports:
      - "3003:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ../monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ../monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - memo-network

  # Log Aggregation
  loki:
    image: grafana/loki:latest
    container_name: memo-loki
    restart: unless-stopped
    ports:
      - "3100:3100"
    volumes:
      - ../monitoring/loki.yml:/etc/loki/local-config.yaml
      - loki_data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - memo-network

  # Log Shipping
  promtail:
    image: grafana/promtail:latest
    container_name: memo-promtail
    restart: unless-stopped
    volumes:
      - ../logs:/var/log/memo
      - ../monitoring/promtail.yml:/etc/promtail/config.yml
    command: -config.file=/etc/promtail/config.yml
    networks:
      - memo-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  loki_data:
    driver: local

networks:
  memo-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

