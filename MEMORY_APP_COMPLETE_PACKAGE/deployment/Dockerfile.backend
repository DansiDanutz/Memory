# Multi-stage Dockerfile for Memo App Backend
# Optimized for production deployment with security best practices

# Stage 1: Build stage
FROM node:18-alpine AS builder

# Set working directory
WORKDIR /app

# Install build dependencies
RUN apk add --no-cache python3 make g++ git

# Copy package files
COPY package*.json ./
COPY tsconfig.json ./

# Install dependencies
RUN npm ci --only=production --silent

# Copy source code
COPY src/ ./src/
COPY tests/ ./tests/

# Build TypeScript
RUN npm run build

# Remove development dependencies
RUN npm prune --production

# Stage 2: Production stage
FROM node:18-alpine AS production

# Install security updates
RUN apk update && apk upgrade && apk add --no-cache dumb-init curl

# Create non-root user
RUN addgroup -g 1001 -S nodejs && \
    adduser -S memo -u 1001 -G nodejs

# Set working directory
WORKDIR /app

# Copy built application from builder stage
COPY --from=builder --chown=memo:nodejs /app/dist ./dist
COPY --from=builder --chown=memo:nodejs /app/node_modules ./node_modules
COPY --from=builder --chown=memo:nodejs /app/package*.json ./

# Create necessary directories
RUN mkdir -p /app/logs /app/uploads /app/temp && \
    chown -R memo:nodejs /app/logs /app/uploads /app/temp

# Set environment variables
ENV NODE_ENV=production
ENV PORT=3001
ENV LOG_LEVEL=info

# Switch to non-root user
USER memo

# Expose port
EXPOSE 3001

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
  CMD curl -f http://localhost:3001/health || exit 1

# Use dumb-init for proper signal handling
ENTRYPOINT ["dumb-init", "--"]

# Start application
CMD ["node", "dist/index.js"]

# Labels for metadata
LABEL maintainer="Memo App Team <team@memo-app.com>"
LABEL version="1.0.0"
LABEL description="Memo App Backend - Personal AI Brain with HMAC-SHA256 Security"
LABEL security.hmac="enabled"
LABEL security.level="enterprise"

